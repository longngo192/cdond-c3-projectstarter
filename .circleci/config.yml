version: 2.1
orbs:
  slack: circleci/slack@4.12.1
  ansible-playbook: orbss/ansible-playbook@0.0.5
  aws-cli: circleci/aws-cli@3.1.5
  python: circleci/python@2.0.3
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      workflow_id: 
        default: "need work flow id"
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-frontend-<<parameters.workflow_id>>"
            aws cloudformation delete-stack --stack-name "udapeople-backend-<<parameters.workflow_id>>"
  notify_slack_pass:
    steps:
      - slack/notify:
          event: pass
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":tada::tada::tada: *Success!*"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Project:*\n${CIRCLE_PROJECT_REPONAME}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*When:*\n$(TZ=Asia/Tokyo date +'%Y/%m/%d %T')"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Job:*\n${CIRCLE_JOB}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Author:*\n${CIRCLE_USERNAME}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch:*\n${CIRCLE_BRANCH}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Tag:*\n${CIRCLE_TAG}"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Job"
                      },
                      "url": "${CIRCLE_BUILD_URL}"
                    }
                  ]
                }
              ]
            }
  notify_slack_fail:
    steps:
      - slack/notify:
          event: fail
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":japanese_ogre::japanese_ogre::japanese_ogre: *Failed* :bangbang:"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Project:*\n${CIRCLE_PROJECT_REPONAME}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*When:*\n$(TZ=Asia/Tokyo date +'%Y/%m/%d %T')"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Job:*\n${CIRCLE_JOB}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Author:*\n${CIRCLE_USERNAME}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch:*\n${CIRCLE_BRANCH}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Tag:*\n${CIRCLE_TAG}"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Job"
                      },
                      "url": "${CIRCLE_BUILD_URL}"
                    }
                  ]
                }
              ]
            }

  fix-audit:
    description: fix audit node module
    parameters:
      folder:
        default: "folder missing "
        type: string
      cache-key:
        default: ""
        type: string
      cache-path:
        default: "cache path missing"
        type: string
    steps:
      - restore_cache:
          keys: 
           - <<parameters.cache-key>>
      - run: |
          cd <<parameters.folder>>
          rm -rf package-lock.json
          npm update
          npm i
          npm audit fix --force
          npm update mkdirp --depth 2
      - save_cache:
          paths:
            - <<parameters.cache-path>>
          key: <<parameters.cache-key>>
  
  audit:
    description: fix audit node module
    parameters:
      folder:
        default: "folder missing "
        type: string
      cache-key:
        default: ""
        type: string
      cache-path:
        default: "cache path missing"
        type: string
    steps:
      - restore_cache:
          keys: 
          - <<parameters.cache-key>>
      - run: |
          cd <<parameters.folder>>
          npm update
          npm audit --audit-level=critical
      - save_cache:
          paths:
            - <<parameters.cache-path>>
          key: <<parameters.cache-key>>
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
      workflow_id:
        type: string   
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/PDd7s6iYFBGNbVoqYuY9Fu/migration_<<parameters.workflow_id>>)
            if (($SUCCESS == 1))
            then
              cd ~/project/backend
              npm install
              npm run build
              npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - notify_slack_pass
      - notify_slack_fail
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - notify_slack_pass
      - notify_slack_fail
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: check env
          command: |
            echo $SLACK_DEFAULT_CHANNEL
      - run:
          name: run test front-end
          command: |
            set -e
            cd frontend
            npm install
            npm run test

      - notify_slack_pass
      - notify_slack_fail

      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  test-backend:
    docker:
      # Docker image here
      - image: cimg/node:13.8.0

    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys:
            - backend-build

      # Your job code here
      - run:
          name: run test backend
          command: |
            set -e
            cd backend
            npm install
            npm run test

      - notify_slack_pass
      - notify_slack_fail

  scan-frontend:
    docker:
      # Docker image here
      - image: cimg/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys:
            - frontend-build
      - fix-audit:
          folder: frontend
          cache-key: backend-node-module
          cache-path: frontend/node_modules
      # Your job code here
      - audit:
          folder: frontend
          cache-key: backend-node-module
          cache-path: frontend/node_modules
      - notify_slack_pass
      - notify_slack_fail

  scan-backend:
    docker:
      # Docker image here
      - image: cimg/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys:
            - backend-build
      # Your job code here
      - fix-audit:
          folder: backend
          cache-key: backend-node-module
          cache-path: backend/node_modules
      # Your job code here
      - audit:
          folder: backend
          cache-key: backend-node-module
          cache-path: backend/node_modules
      - notify_slack_pass
      - notify_slack_fail

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: cimg/aws:2023.04
        auth:
          username: longns
          password: $DOCKERHUB_ACCESS_TOKEN
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: check version aws cli
          command: aws --version
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=your-tag \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo $(aws ec2 describe-instances --filters Name=tag:Name,Values=backend-"${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[0].Instances[0].PublicIpAddress'  --output text) >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - notify_slack_pass
      - notify_slack_fail
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}


  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: cimg/python:3.11.3
        auth:
          username: longns
          password: $DOCKERHUB_ACCESS_TOKEN
    steps:
      # install aws cli
      - aws-cli/install
      # Checkout code from git
      - checkout
      # Attach workspace
      - attach_workspace:
          at: ~/
      # export backend ip
      - run: 
          name: check inventory.txt
          command: | 
            echo 'export BACKEND_IP=$(sed -n '2p' .circleci/ansible/inventory.txt)' >> "$BASH_ENV"
            echo $BACKEND_IP
            source "$BASH_ENV"
      # Add ssh keys with fingerprint
      - add_ssh_keys:
         fingerprints:
            - "99:6e:de:8c:66:fa:d3:a4:9f:f1:91:24:c8:b1:14:0d"
      # Install dependencies
      - ansible-playbook/install
      - run:
          name: run playbook
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt --private-key=udacity.pem configure-server.yml
      - notify_slack_pass
      - notify_slack_fail
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: cimg/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-node-module]

      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                curl --insecure https://kvdb.io/PDd7s6iYFBGNbVoqYuY9Fu/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            fi
      - notify_slack_pass
      - notify_slack_fail
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: cimg/aws:2023.04
    steps:
      # Checkout code from git
       - checkout
       - attach_workspace:
          at: ~/
       - run:
          name: Install dependencies
          command: |
            sudo apt-get install tar gzip nodejs npm curl
       - run:
           name: Get backend url
           command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query "Reservations[*].Instances[*].[PublicIpAddress]" \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL=${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
       - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive 
            
      # Here's where you will add some code to rollback on failure
       - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
       - revert-migrations:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 
       - notify_slack_pass
       - notify_slack_fail
      # Here's where you will add some code to rollback on failure

  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: cimg/python:3.11.3
    steps:
        # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
         fingerprints:
            - "99:6e:de:8c:66:fa:d3:a4:9f:f1:91:24:c8:b1:14:0d"
      # attach workspace
      - attach_workspace:
          at: ~/
      - ansible-playbook/install
      - run:
          name: Install dependencies
          command: |
            sudo apt-get install tar gzip nodejs npm curl aws-cli
      - run:
          name: Deploy backend
          command: |
            pwd
            cd backend
            touch .env
            echo ENVIRONMENT=production > ".env"
            echo TYPEORM_CONNECTION=postgres >> ".env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> ".env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> ".env"
            echo NODE_ENV=production >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
            
            pwd
            ls -al
            npm install
            npm run build
            cd ..
            pwd
            ls -al
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}   
      - notify_slack_pass
      - notify_slack_fail
      # Here's where you will add some code to rollback on failure

  smoke-test:
    docker:
      # Lightweight Docker image
      - image: cimg/python:3.11.3
    steps:
       # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt-get install tar gzip nodejs npm curl aws-cli
      - run:
          name: Get backend url and Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query "Reservations[*].Instances[*].[PublicIpAddress]" \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text)
            echo ${BACKEND_IP}
            
            export BACKEND=$(echo $BACKEND_IP | grep -o '[^ ]*$')
            
            echo $BACKEND
            export API_URL="http://${BACKEND}:3030"
            echo "API_URL=${API_URL}"
            echo "Sleeping for 1 minute"
            sleep 60
            if curl -v "${API_URL}/api/status" | grep "ok"
            then
              return 0
            else
              return 1
            fi 
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo ${URL}
            
            if curl -s ${URL} | grep "Welcome"
            then
              # Change this to 0 after the job fails
              return 0
            else
              return 1
            fi
      
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 
      - notify_slack_pass
      - notify_slack_fail
      # Here's where you will add some code to rollback on failure

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: cimg/aws:2023.04
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt-get install tar gzip -y
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text | grep -o '[^-]*$' )
            echo $OldWorkflowID >> ~/project/OldWorkflowID.txt
            cat ~/project/OldWorkflowID.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/OldWorkflowID.txt
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
            echo OldWorkflowID: cat ~/project/OldWorkflowID.txt
            echo CurrentWorflowID: "${CIRCLE_WORKFLOW_ID:0:7}"
      # Here's where you will add some code to rollback on failure  
      - notify_slack_pass
      - notify_slack_fail
  cleanup:
    docker:
      - image: cimg/aws:2023.04
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt-get install tar gzip -y
      - attach_workspace:
          at: ~/
      - run:
          name: Get old stack workflow id
          command: |
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo Stack names: "${STACKS[@]}"
            cat ~/project/OldWorkflowID.txt
            export OldWorkflowID=$(cat ~/project/OldWorkflowID.txt)
            echo OldWorkflowID: "${OldWorkflowID}"
      - run:
          name: Remove old stacks and files
          command: |
            export OldWorkflowID=$(cat ~/project/OldWorkflowID.txt)
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
            then
              echo "Deleting old stack"
              echo "s3://udapeople-${OldWorkflowID}"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive || true
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}" || true
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}" || true
            else
              echo "Stack is the latest"
            fi
            
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
