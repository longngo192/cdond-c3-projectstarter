version: 2.1
orbs:
  slack: circleci/slack@4.12.1
  ansible-playbook: orbss/ansible-playbook@0.0.5
  aws-cli: circleci/aws-cli@3.1.5
  python: circleci/python@2.0.3
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      workflow_id: 
        default: "need work flow id"
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-frontend-<<parameters.workflow_id>>"
            aws cloudformation delete-stack --stack-name "udapeople-backend-<<parameters.workflow_id>>"
  notify_slack_pass:
    steps:
      - slack/notify:
          event: pass
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":tada::tada::tada: *Success!*"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Project:*\n${CIRCLE_PROJECT_REPONAME}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*When:*\n$(TZ=Asia/Tokyo date +'%Y/%m/%d %T')"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Job:*\n${CIRCLE_JOB}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Author:*\n${CIRCLE_USERNAME}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch:*\n${CIRCLE_BRANCH}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Tag:*\n${CIRCLE_TAG}"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Job"
                      },
                      "url": "${CIRCLE_BUILD_URL}"
                    }
                  ]
                }
              ]
            }
  notify_slack_fail:
    steps:
      - slack/notify:
          event: fail
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":japanese_ogre::japanese_ogre::japanese_ogre: *Failed* :bangbang:"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Project:*\n${CIRCLE_PROJECT_REPONAME}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*When:*\n$(TZ=Asia/Tokyo date +'%Y/%m/%d %T')"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Job:*\n${CIRCLE_JOB}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Author:*\n${CIRCLE_USERNAME}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch:*\n${CIRCLE_BRANCH}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Tag:*\n${CIRCLE_TAG}"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Job"
                      },
                      "url": "${CIRCLE_BUILD_URL}"
                    }
                  ]
                }
              ]
            }

  fix-audit:
    description: fix audit node module
    parameters:
      folder:
        default: "folder missing "
        type: string
      cache-key:
        default: ""
        type: string
      cache-path:
        default: "cache path missing"
        type: string
    steps:
      - restore_cache:
          keys: 
           - <<parameters.cache-key>>
      - run: |
          cd <<parameters.folder>>
          rm -rf package-lock.json
          npm update
          npm i
          npm audit fix --force
          npm update mkdirp --depth 2
      - save_cache:
          paths:
            - <<parameters.cache-path>>
          key: <<parameters.cache-key>>
  
  audit:
    description: fix audit node module
    parameters:
      folder:
        default: "folder missing "
        type: string
      cache-key:
        default: ""
        type: string
      cache-path:
        default: "cache path missing"
        type: string
    steps:
      - restore_cache:
          keys: 
          - <<parameters.cache-key>>
      - run: |
          cd <<parameters.folder>>
          npm update
          npm audit --audit-level=critical
      - save_cache:
          paths:
            - <<parameters.cache-path>>
          key: <<parameters.cache-key>>
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              
            fi

jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - notify_slack_pass
      - notify_slack_fail
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - notify_slack_pass
      - notify_slack_fail
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: check env
          command: |
            echo $SLACK_DEFAULT_CHANNEL
      - run:
          name: run test front-end
          command: |
            set -e
            cd frontend
            npm install
            npm run test

      - notify_slack_pass
      - notify_slack_fail

      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  test-backend:
    docker:
      # Docker image here
      - image: cimg/node:13.8.0

    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys:
            - backend-build

      # Your job code here
      - run:
          name: run test backend
          command: |
            set -e
            cd backend
            npm install
            npm run test

      - notify_slack_pass
      - notify_slack_fail

  scan-frontend:
    docker:
      # Docker image here
      - image: cimg/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys:
            - frontend-build
      - fix-audit:
          folder: frontend
          cache-key: backend-node-module
          cache-path: frontend/node_modules
      # Your job code here
      - audit:
          folder: frontend
          cache-key: backend-node-module
          cache-path: frontend/node_modules
      - notify_slack_pass
      - notify_slack_fail

  scan-backend:
    docker:
      # Docker image here
      - image: cimg/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys:
            - backend-build
      # Your job code here
      - fix-audit:
          folder: backend
          cache-key: backend-node-module
          cache-path: backend/node_modules
      # Your job code here
      - audit:
          folder: backend
          cache-key: backend-node-module
          cache-path: backend/node_modules
      - notify_slack_pass
      - notify_slack_fail

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: cimg/aws:2023.04
        auth:
          username: longns
          password: $DOCKERHUB_ACCESS_TOKEN
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: check version aws cli
          command: aws --version
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=your-tag \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo $(aws ec2 describe-instances --filters Name=tag:Name,Values=backend-"${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[0].Instances[0].PublicIpAddress'  --output text) >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - notify_slack_pass
      - notify_slack_fail
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}


  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: cimg/python:3.11.3
        auth:
          username: longns
          password: $DOCKERHUB_ACCESS_TOKEN
    steps:
      - aws-cli/install
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/
      # confirm backend ip
      - run: 
          name: check inventory.txt
          command: | 
            echo 'export BACKEND_IP=$(sed -n '2p' .circleci/ansible/inventory.txt)' >> "$BASH_ENV"
            echo $BACKEND_IP
            source "$BASH_ENV"
      # Add ssh keys with fingerprint
      - run:
          name: create ssh private key
          command: |
            echo $SSH_KEY > udacity.pem
            chmod 400 udacity.pem
            cat udacity.pem
      - run:
          name: add key fingerprint
          command: |
            echo $BACKEND_IP
            ssh-keyscan -H $BACKEND_IP >> ~/.ssh/known_hosts
      # Install dependencies
      - ansible-playbook/install
      - run:
          name: Install dependencies
          command: |
            # Your code here 
      - run:
          name: run playbook
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - notify_slack_pass
      - notify_slack_fail
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: cimg/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Run migrations
          command: |
            # Your code here

      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
      - notify_slack_pass
      - notify_slack_fail
      # Here's where you will add some code to rollback on failure

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: cimg/aws:2023.04
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
      - notify_slack_pass
      - notify_slack_fail
      # Here's where you will add some code to rollback on failure

  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: quipper/ansible-circleci
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      # attach workspace
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Deploy backend
          command: |
            # your code here
      - notify_slack_pass
      - notify_slack_fail
      # Here's where you will add some code to rollback on failure

  smoke-test:
    docker:
      # Lightweight Docker image
      - image: alpine:3.14
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
      - run:
          name: Backend smoke test.
          command: |
            # your code here
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
      - notify_slack_pass
      - notify_slack_fail
      # Here's where you will add some code to rollback on failure

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: cimg/aws:2023.04
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
      - notify_slack_pass
      - notify_slack_fail
      # Here's where you will add some code to rollback on failure

  cleanup:
    docker:
      # Docker image here
      - image: alpine:3.14
    steps:
      # Checkout code from git
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi

workflows:
  default:
    jobs:
      - build-frontend:
          context: common
      - build-backend:
          context: common
      - test-frontend:
          context: common
          requires: [build-frontend]
      - test-backend:
          context: common
          requires: [build-backend]
      - scan-backend:
          context: common
          requires: [build-backend]
      - scan-frontend:
          context: common
          requires: [build-frontend]
      - deploy-infrastructure:
          context: common
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [test-feature-branch]
      - configure-infrastructure:
          context: common
          requires: [deploy-infrastructure]
      - run-migrations:
          context: common
          requires: [configure-infrastructure]
          filters:
             branches:
               only: [test-feature-branch]
      - deploy-frontend:
          context: common
          requires: [run-migrations]
      - deploy-backend:
          context: common
          requires: [run-migrations]
      - smoke-test:
          context: common
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          context: common
          requires: [smoke-test]
      - cleanup:
          context: common
          requires: [cloudfront-update]
